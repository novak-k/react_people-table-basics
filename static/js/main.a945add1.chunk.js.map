{"version":3,"sources":["components/PageNavLink.tsx","components/MainNav.tsx","components/PersonLink.tsx","components/PeolpeTable.tsx","api.ts","components/Loader/Loader.tsx","pages/PeoplePage.tsx","App.tsx","index.tsx"],"names":["PageNavLink","to","text","className","isActive","classNames","MainNav","role","PersonLink","person","slug","sex","name","PeopleTable","people","useParams","map","born","died","mother","motherName","father","fatherName","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","PeoplePage","useState","setPeople","isLoading","setIsLoading","isInitialized","setIsInitialized","error","setError","useEffect","fetchData","peopleFromServer","peopleWithParents","find","mom","fath","noPeopleOnServer","length","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.a945add1.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { FC } from 'react';\nimport { NavLink } from 'react-router-dom';\n\ntype Props = {\n  to: string;\n  text: string;\n};\n\nexport const PageNavLink: FC<Props> = ({ to, text }) => (\n  <NavLink\n    to={to}\n    className={({ isActive }) => classNames('navbar-item',\n      { 'has-background-grey-lighter': isActive })}\n  >\n    {text}\n  </NavLink>\n);\n","import { PageNavLink } from './PageNavLink';\n\nexport const MainNav = () => (\n  <nav\n    data-cy=\"nav\"\n    className=\"navbar is-fixed-top has-shadow\"\n    role=\"navigation\"\n    aria-label=\"main navigation\"\n  >\n    <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <PageNavLink to=\"/\" text=\"Home\" />\n        <PageNavLink to=\"people\" text=\"People\" />\n      </div>\n    </div>\n  </nav>\n);\n","import classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person,\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  return (\n    <Link\n      to={`../${person.slug}`}\n      className={classNames({ 'has-text-danger': person.sex === 'f' })}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","import { FC } from 'react';\nimport { useParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\n\ntype Props = {\n  people: Person[],\n};\n\nexport const PeopleTable: FC<Props> = ({ people }) => {\n  const { slug } = useParams<{ slug: string }>();\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <tr\n            data-cy=\"person\"\n            key={person.slug}\n            className={classNames({\n              'has-background-warning': person.slug === slug,\n            })}\n          >\n            <td>\n              <PersonLink person={person} />\n            </td>\n\n            <td>{person.sex}</td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n            <td>\n              {person.mother ? <PersonLink person={person.mother} />\n                : person.motherName || '-'}\n            </td>\n            <td>\n              {person.father ? <PersonLink person={person.father} />\n                : person.fatherName || '-'}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { useEffect, useState } from 'react';\nimport { PeopleTable } from '../components/PeolpeTable';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\nimport { Loader } from '../components/Loader';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      setIsInitialized(false);\n      setError(false);\n\n      try {\n        const peopleFromServer = await getPeople();\n\n        const peopleWithParents = peopleFromServer.map((person) => {\n          const mother = peopleFromServer\n            .find(mom => mom.name === person.motherName);\n          const father = peopleFromServer\n            .find(fath => fath.name === person.fatherName);\n\n          return (\n            {\n              ...person,\n              mother,\n              father,\n            }\n          );\n        });\n\n        setPeople(peopleWithParents);\n        setIsInitialized(true);\n      } catch {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const noPeopleOnServer = isInitialized && !people.length;\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      {isLoading && (\n        <Loader />\n      )}\n\n      {error && (\n        <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n          Something went wrong\n        </p>\n      )}\n\n      {noPeopleOnServer && (\n        <p data-cy=\"noPeopleMessage\">\n          There are no people on the server\n        </p>\n      )}\n\n      {people.length > 0 && (\n        <PeopleTable people={people} />\n      )}\n    </>\n  );\n};\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport './App.scss';\nimport { MainNav } from './components/MainNav';\nimport { PeoplePage } from './pages/PeoplePage';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <MainNav />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"block\">\n          <div className=\"box table-container\">\n            <Routes>\n              <Route path=\"/\" element={<h1 className=\"title\">Home Page</h1>} />\n              <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n\n              <Route path=\"*\" element={<p>Page not found</p>} />\n\n              <Route path=\"people\">\n                <Route index element={<PeoplePage />} />\n                <Route path=\":slug\" element={<PeoplePage />} />\n              </Route>\n            </Routes>\n          </div>\n        </div>\n      </div>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}